""" 
Кейс № 2. Страны мира
 География, экономика и социология разных стран мира.
 ● 20 столбцов : численность населения | уровень миграции | 
показатель ВВП | уровень грамотности | количество телефонов | тип 
экономики | выход к морю и др.
 Самостоятельная аналитика.
 Гипотеза: высокая плотность населения в регионе напрямую влияет на уровень чистой миграции из региона
"""

# импорт библиотеки Pandas и Numpy
import pandas as pd
import numpy as np

# Читаем данные из CSV файла
df = pd.read_csv(r'LR_6\countries of the world.csv')

print('Влияние плотности населения в регионе на уровень чистой миграции в регионе: ')

# Столбец Pop. Density (per sq. mi.) - 1) привели значение к числовому виду, 2) пустышки - заменил на NaN, 3) привели столбец к числовому (дробному) значению
df['Pop. Density (per sq. mi.)'] = df['Pop. Density (per sq. mi.)'].str.replace(',','.').fillna(np.nan).astype(float)

# Столбец Net migration - 1) привели значение к числовому виду, 2) пустышки - заменил на NaN, 3) привели столбец к числовому (дробному) значению
df['Net migration'] = df['Net migration'].str.replace(',','.').fillna(np.nan).astype(float)



# Цикл для очистки выбранных столбцов от пустых значений:
for col in ['Pop. Density (per sq. mi.)', 'Net migration']:
    # Ищем среднее значение столбца 'Pop. Density (per sq. mi.)', группируем по столбцу 'Region'
    avg_per_region = df.groupby('Region')[col].mean()

    # Соединяем датафрейм с найденными средними значениями по регионам (т.к. столбцы 'Net migration' - имеют одинаковые названия - теперь называются 'Net migration_x' и 'Net migration_y')
    df = df.merge(avg_per_region, on=['Region'], how='left')

    # loc = фильтр
    df.loc[
        df[col + '_x'].isna() # выбор пустых значений из df
        , col + '_x' # выбор столбца, куда буду записывать значение
    ] = df.loc[
        df[col + '_x'].isna() # выбрали также пустые значения из df
        , col + '_y' # столбец из которого брал значения для df => среднее значение по региону
    ]

    # удалили лишний столбец - со средними значениями по региону
    del df[col + '_y']

    # переименовываем столбец в изначальное название
    df = df.rename(
        columns={
            col + '_x':col 
        }
    )

# Выводим средние значение по плотности населения и уровню чистой миграции
df = df.groupby('Region').agg(
    {'Pop. Density (per sq. mi.)': 'mean', 'Net migration': 'mean'}
)

# Сортировка чистой миграции (от большего к меньшему)
df = df.sort_values(by='Net migration', ascending=False)


print(df)






