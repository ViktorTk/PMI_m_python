""" Задача 4: Обработка матрицы и работа с многомерными массивами
 Напишите программу, которая:
 1. Принимает на вход размеры матрицы (количество строк и столбцов), а затем саму
 матрицу целых чисел.
 2. Выводит сумму всех элементов матрицы.
 3. Определяет и выводит максимальный элемент в матрице и его координаты (номер
 строки и столбца).
 4. Транспонирует матрицу (переставляет строки с столбцами местами) и выводит
 результат.
 5. Считает сумму элементов каждой строки и каждого столбца, выводит эти суммы.
 6. Заменяет все элементы главной диагонали на их квадраты. """


""" 1. Принимает на вход размеры матрицы (количество строк и столбцов), а затем саму
матрицу целых чисел. """

import numpy as np

def main():
    # 1. Ввод размеров матрицы и самой матрицы
    rows = int(input("Введите количество строк: "))
    cols = int(input("Введите количество столбцов: "))

    print("Введите матрицу (каждая строка с новой строки, элементы через пробел):")
    matrix = []
    for _ in range(rows):
        row = list(map(int, input().split()))
        matrix.append(row)

    matrix = np.array(matrix)

    # 2. Сумма всех элементов матрицы
    total_sum = np.sum(matrix)
    print(f"Сумма всех элементов матрицы: {total_sum}")

    # 3. Максимальный элемент и его координаты
    max_element = np.max(matrix)
    max_coords = np.unravel_index(np.argmax(matrix), matrix.shape)
    print(f"Максимальный элемент: {max_element}, его координаты: строка {max_coords[0]}, столбец {max_coords[1]}")

    # 4. Транспонирование матрицы
    transposed_matrix = matrix.T
    print("Транспонированная матрица:")
    print(transposed_matrix)

    # 5. Сумма элементов каждой строки и каждого столбца
    row_sums = np.sum(matrix, axis=1)
    col_sums = np.sum(matrix, axis=0)
    print("Суммы элементов по строкам:", row_sums)
    print("Суммы элементов по столбцам:", col_sums)

    # 6. Замена элементов главной диагонали на их квадраты
    for i in range(min(rows, cols)):
        matrix[i, i] = matrix[i, i] ** 2
    print("Матрица после замены элементов главной диагонали на их квадраты:")
    print(matrix)

if __name__ == "__main__":
    main()


